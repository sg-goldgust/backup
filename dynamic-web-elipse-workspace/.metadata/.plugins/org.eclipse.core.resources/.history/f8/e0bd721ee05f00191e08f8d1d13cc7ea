package edu.autocar.websocket;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.google.gson.Gson;

import edu.autocar.domain.CarMessage;

public class EchoHandler extends TextWebSocketHandler {

	Map<Integer, List<WebSocketSession>> map = Collections.synchronizedMap(new HashMap<>());
	// List<WebSocketSession> list = Collections.synchronizedList(new
	// LinkedList<>());

	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		System.out.println("메시지를 전송합니다.");
		// 순수하게 websocket만 관리하는 session이다.
		// TODO Auto-generated method stub
		System.out.println("수신된 메세지" + message);
		String rcvMsg = message.getPayload(); // 수신된 메세지를 꺼내고
		Gson gson = new Gson();
		CarMessage carMsg = gson.fromJson(rcvMsg, CarMessage.class);
		int target = carMsg.getTarget();
		System.out.println("메세지 type :" + carMsg.getMsgType());
		if (carMsg.getMsgType().equals("POSITION_SUB")) {
			addObserver(target, session);
		} else if (carMsg.getMsgType().equals("POSITION")) {
			List<WebSocketSession> list = map.get(target);
			if (list != null) {
				for (WebSocketSession s : list) {
					s.sendMessage(message);
				}
			}
		}
	}

	void addObserver(int target, WebSocketSession session) {
		List<WebSocketSession> list = map.get(target);
		if (list == null) {
			list = new LinkedList<>();
			map.put(target, list);
		}
		list.add(session);
	}
	
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		// TODO Auto-generated method stub
		super.afterConnectionClosed(session, status);
		for(int target : map.keySet()) {
			List<WebSocketSession> list = map.get(target);
			if(list.remove(session))
				break;
		}
		
	}
	// 전송한다
//		TextMessage sendMsg = new TextMessage(rcvMsg);
//		for (WebSocketSession s : list) {
//			if(s!= session) {
//				s.sendMessage(sendMsg);
//			}
//		}
//		
//		session.sendMessage(sendMsg);

//	@Override
//	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
//		// TODO Auto-generated method stub
//		super.afterConnectionClosed(session, status);
//		System.out.println("연결 끊어졌습니다.");
//	}
//
//	@Override
//	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
//		// TODO Auto-generated method stub
//		super.handleMessage(session, message);
//	}
//
//	@Override
//	public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
//		// TODO Auto-generated method stub
//		super.handleTransportError(session, exception);
//	}
//
//	@Override
//	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
//
//		if (session)
//
//			// TODO Auto-generated method stub
//			super.afterConnectionEstablished(session);
//		list.add(session);
//		System.out.println("연결 .");
//	}
}
