/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-04-15 05:13:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class naver_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/student/dynamic-web-elipse-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/naverApi/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/Users/student/dynamic-web-elipse-workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/naverApi/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1552270283298L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=rbeyz68rf5\">\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=your_client_id&submodules=geocoder\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t$(window).on(\"load\", function() {\r\n");
      out.write("\t\t\tif (navigator.geolocation) {\r\n");
      out.write("\t\t\t\tnavigator.geolocation.getCurrentPosition(onSuccessGeolocation, // 위치 정보 얻기 성공 시 핸들러 \r\n");
      out.write("\t\t\t\tonErrorGeolocation); // 위치 정보 얻기 실패 시 핸들러 \r\n");
      out.write("\t\t\t} else { // Geolocation 지원하지 않음 \r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\tfunction onSuccessGeolocation(position) {\r\n");
      out.write("\t\tvar location = new naver.maps.LatLng(position.coords.latitude,\r\n");
      out.write("\t\t\t\tposition.coords.longitude);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar maker = new Maker({\r\n");
      out.write("\t\t\tposition : location,\r\n");
      out.write("\t\t\tmap : map,\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tmap.setCenter(location);\r\n");
      out.write("\t\t// 얻은 좌표를 지도의 중심으로 설정합니다. \r\n");
      out.write("\t\tmap.setZoom(10);\r\n");
      out.write("\t\t// 지도의 줌 레벨을 변경합니다. \r\n");
      out.write("\t\tinfowindow.setContent('<div style=\"padding:20px;\">'\r\n");
      out.write("\t\t\t\t+ 'geolocation.getCurrentPosition() 위치' + '</div>');\r\n");
      out.write("\t\tinfowindow.open(map, location);\r\n");
      out.write("\t\tconsole.log('Coordinates: ' + location.toString());\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction onErrorGeolocation() {\r\n");
      out.write("\t\tvar center = map.getCenter();\r\n");
      out.write("\t\tinfowindow\r\n");
      out.write("\t\t\t\t.setContent('<div style=\"padding:20px;\">'\r\n");
      out.write("\t\t\t\t\t\t+ '<h5 style=\"margin-bottom:5px;color:#f00;\">Geolocation failed!</h5>'\r\n");
      out.write("\t\t\t\t\t\t+ \"latitude: \" + center.lat() + \"<br />longitude: \"\r\n");
      out.write("\t\t\t\t\t\t+ center.lng() + '</div>');\r\n");
      out.write("\t\tinfowindow.open(map, center);\r\n");
      out.write("\t}\t\r\n");
      out.write("\t})\r\n");
      out.write("\r\n");
      out.write("\t/* \r\n");
      out.write("\t $(function() {\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t naver.maps.Service.reverseGeocode(\r\n");
      out.write("\t {\r\n");
      out.write("\t location : new naver.maps.LatLng(37.3595316, 127.1052133),\r\n");
      out.write("\t },\r\n");
      out.write("\t function(status, response) {\r\n");
      out.write("\t if(status !== naver.maps.Service.Status.OK) {\r\n");
      out.write("\t return alert('Something wrong!');\r\n");
      out.write("\t }\r\n");
      out.write("\t var result = response.result,\r\n");
      out.write("\t items = result.items;\r\n");
      out.write("\t console.log(items);\r\n");
      out.write("\t\r\n");
      out.write("\t for(item in items) {\r\n");
      out.write("\t var infowindow = new naver.maps.InfoWindow({\r\n");
      out.write("\t content : items[item].address\r\n");
      out.write("\t });\r\n");
      out.write("\t }\r\n");
      out.write("\t\r\n");
      out.write("\t });\r\n");
      out.write("\t\r\n");
      out.write("\t naver.maps.Service.geocode(\r\n");
      out.write("\t { address: '역삼' },\r\n");
      out.write("\t\r\n");
      out.write("\t function(status, response) {\r\n");
      out.write("\t console.log(status, response)\r\n");
      out.write("\t if (status === naver.maps.Service.Status.ERROR) {\r\n");
      out.write("\t return alert('Something wrong!');\r\n");
      out.write("\t }\r\n");
      out.write("\t var result = response.result, // 검색 결과의 컨테이너\r\n");
      out.write("\t items = result.items; // 검색 결과의 배열\r\n");
      out.write("\t console.log(items);\r\n");
      out.write("\t\r\n");
      out.write("\t for (item in items) {\r\n");
      out.write("\t console.log(item);\r\n");
      out.write("\t\r\n");
      out.write("\t }\r\n");
      out.write("\t\r\n");
      out.write("\t }\r\n");
      out.write("\t );\r\n");
      out.write("\t\r\n");
      out.write("\t var mapOptions = {\r\n");
      out.write("\t center : new naver.maps.LatLng(37.3595704, 127.105399),\r\n");
      out.write("\t zoom : 10\r\n");
      out.write("\t };\r\n");
      out.write("\t\r\n");
      out.write("\t var map = new naver.maps.Map('map', mapOptions);\r\n");
      out.write("\r\n");
      out.write("\t var markerIcon = {\r\n");
      out.write("\t url : '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/images/86.jpg',\r\n");
      out.write("\t size : new naver.maps.Size(32, 32),\r\n");
      out.write("\t origin : new naver.maps.Point(0, 0),\r\n");
      out.write("\t anchor : new naver.maps.Point(16, 32)\r\n");
      out.write("\t };\r\n");
      out.write("\t\r\n");
      out.write("\t var marker = new naver.maps.Marker({\r\n");
      out.write("\t position : new naver.maps.LatLng(37.3595704, 127.105399),\r\n");
      out.write("\t map : map,\r\n");
      out.write("\t icon : markerIcon\r\n");
      out.write("\t });\r\n");
      out.write("\t\r\n");
      out.write("\t contentString = `\r\n");
      out.write("\t <div>\r\n");
      out.write("\t <img src = \"http://localhost:8080/monitor/camera/1\" width = \"320\"/>\r\n");
      out.write("\t <p> </p>\r\n");
      out.write("\t </div>\r\n");
      out.write("\t `;\r\n");
      out.write("\r\n");
      out.write("\t var infowindow = new naver.maps.InfoWindow({\r\n");
      out.write("\t content : contentString\r\n");
      out.write("\t });\r\n");
      out.write("\t\r\n");
      out.write("\t naver.maps.Event.addListener(marker, \"click\", function(e) {\r\n");
      out.write("\t if (infowindow.getMap()) {\r\n");
      out.write("\t infowindow.close();\r\n");
      out.write("\t } else {\r\n");
      out.write("\t infowindow.open(map, marker);\r\n");
      out.write("\t }\r\n");
      out.write("\t }\r\n");
      out.write("\t );})\t */\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<div id=\"map\" style=\"width: 100%; height: 400px;\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
